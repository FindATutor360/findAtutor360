import 'dart:developer';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:findatutor360/core/models/main/message_model.dart';
import 'package:firebase_auth/firebase_auth.dart';

abstract class MessageService {
  Future<void> sendMessage(
    String? senderEmail,
    String? message,
    String? recipientEmail,
    String? recipientName,
    String? recipientPhotoUrl,
  );
  Stream<List<Messages>> getMessages(
    String currentUserEmail,
    String recipientEmail,
  );
  Stream<List<Map<String, dynamic>>> getLatestMessages(String currentUserEmail);
}

class MessageServiceImpl implements MessageService {
  final FirebaseFirestore _fireStore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Sends a message to the Firestore database
  @override
  Future<void> sendMessage(
    String? senderEmail,
    String? message,
    String? recipientEmail,
    String? recipientName,
    String? recipientPhotoUrl,
  ) async {
    try {
      // Ensure that both sender and recipient emails are included in the participants
      List<String> participants = [senderEmail!, recipientEmail!];

      // Create a `Messages` object with the provided details
      Messages messages = Messages(
        id: null, // The ID will be auto-generated by Firestore
        senderEmail: senderEmail,
        recipientEmail: recipientEmail,
        senderName: _auth.currentUser!.displayName,
        senderPhotoUrl: _auth.currentUser!.photoURL,
        recipientName: recipientName,
        recipientPhotoUrl: recipientPhotoUrl,
        participants: participants, // Explicitly set the participants list
        message: message!, // The message content
        // ignore: sdk_version_since
        createdAt: DateTime.timestamp().toUtc(), // Set the timestamp
        readBy: false, // Initialize as unread
      );

      // Add the message to the 'Messages' collection in Firestore
      DocumentReference docRef = await _fireStore.collection('Messages').add(
            messages.toJson(),
          );

      // Update the document with its generated ID
      await _fireStore
          .collection('Messages')
          .doc(docRef.id)
          .update({'id': docRef.id});
      log("Message added to DB successfully!", name: 'debug');
    } catch (e) {
      log(e.toString(), name: 'debug'); // Log any error that occurs
      rethrow; // Rethrow the exception for further handling
    }
  }

  // Retrieves messages between the current user and a recipient
  @override
  Stream<List<Messages>> getMessages(
    String currentUserEmail,
    String recipientEmail,
  ) {
    return _fireStore
        .collection('Messages')
        .where('participants',
            arrayContains:
                currentUserEmail) // Filter messages involving the current user
        .orderBy('createdAt',
            descending: true) // Order messages by creation time
        .snapshots()
        .map((snapshot) {
      // Fetch and filter messages between the current user and recipient
      List<Messages> messages = snapshot.docs
          .map((doc) => Messages.fromJson(doc.data()))
          .where((message) => message.participants!.contains(recipientEmail))
          .toList();

      // Update the `readBy` field for messages received by the current user
      for (var message in messages) {
        if (message.recipientEmail == currentUserEmail &&
            message.readBy == false) {
          _fireStore
              .collection('Messages')
              .doc(message.id!)
              .update({'readBy': true}); // Mark the message as read
          message.readBy = true; // Update the local model
        }
      }

      return messages; // Return the list of messages
    });
  }

  // Retrieves the latest messages with all participants for the current user
  @override
  Stream<List<Map<String, dynamic>>> getLatestMessages(
    String currentUserEmail,
  ) {
    return _fireStore
        .collection('Messages')
        .where('participants',
            arrayContains:
                currentUserEmail) // Filter messages involving the current user
        .orderBy('createdAt',
            descending: true) // Order messages by creation time
        .snapshots()
        .map((snapshot) {
      final messages =
          snapshot.docs.map((doc) => Messages.fromJson(doc.data())).toList();

      // Use a map to store the latest message for each conversation
      final Map<String, Map<String, dynamic>> latestMessages = {};

      for (var message in messages) {
        // Determine the other participant in the conversation
        final otherUser = message.participants!
            .firstWhere((email) => email != currentUserEmail);

        // Initialize an entry for the other user if not already present
        if (!latestMessages.containsKey(otherUser)) {
          latestMessages[otherUser] = {
            'latestMessage': message,
            'unreadCount': 0,
          };
        }

        // Increment the unread count if the message is from the other user and unread
        if (message.senderEmail == otherUser) {
          if (message.recipientEmail == currentUserEmail && !message.readBy!) {
            latestMessages[otherUser]!['unreadCount'] =
                (latestMessages[otherUser]!['unreadCount'] as int) + 1;
          }
        }

        // Update the latest message if the current message is more recent
        if (message.createdAt!.isAfter(
            (latestMessages[otherUser]!['latestMessage'] as Messages)
                .createdAt!)) {
          latestMessages[otherUser]!['latestMessage'] = message;
        }
      }

      // Return the values of the map as a list
      return latestMessages.values.toList();
    });
  }
}
